@{
    Layout = "_Layout";
    
}
@RenderBody()

<div class="content">
    <div class="grid">
        <div class="grid__row">
            <div class="grid__column-2">
                <div class="productFilter">
                    <h3 class="productFilter__heading">Lọc theo giá</h3>
                    <div class="productFilter__priceFilter">
                        <div class="productFilter__priceFilter-item">
                            <input id="price1" type="radio" name="priceRange" value="1">
                            <label for="price1"> 0đ - 1tr </label><br>
                        </div>
                        <div class="productFilter__priceFilter-item">
                            <input id="price2" type="radio" name="priceRange" value="2">
                            <label for="price2"> 1tr - 5tr </label><br>
                        </div>
                        <div class="productFilter__priceFilter-item">
                            <input id="price3" type="radio" name="priceRange" value="3">
                            <label for="price3"> 5tr - 10tr </label><br>
                        </div>
                        <div class="productFilter__priceFilter-item">
                            <input id="price4" type="radio" name="priceRange" value="4">
                            <label for="price4"> 10tr - 20tr </label><br>
                        </div>
                        <div class="productFilter__priceFilter-item">
                            <input id="price5" type="radio" name="priceRange" value="5">
                            <label for="price5"> >20tr </label><br>
                        </div>
                        <div class="productFilter__priceFilter-item">
                            <input id="price6" type="radio" name="priceRange" checked = "true" value="6">
                            <label for="price6"> Tất cả giá </label><br>
                        </div>
                    </div>

                    <h3 class="productFilter__heading" style="margin-top: 50px;">Sắp xếp theo giá</h3>
                    <div class="productFilter__sortProduct">
                        <div class="productFilter__sortProduct-item">
                            <input id="sort1" type="radio" name="sortType" value="1">
                            <label for="sort1"> Tăng dần </label><br>
                        </div>
                        <div class="productFilter__sortProduct-item">
                            <input id="sort2" type="radio" name="sortType" value="2">
                            <label for="sort2"> Giảm dần </label><br>
                        </div>
                        <div class="productFilter__sortProduct-item">
                            <input id="sort3" checked="true" type="radio" name="sortType" value="3">
                            <label for="sort3"> Mặc định </label><br>
                        </div>
                    </div>

                    <h3 class="productFilter__heading" style="margin-top: 50px;">Lọc theo hãng</h3>
                    <select class="productFilter__brandFilter" name="brandSelection" id="brandSelection">
                        <option name="brandOption" value="0" selected>Tất cả</option>
                        @foreach(Brand brand in ViewBag.Brands){
                            <option name="brandOption" value="@brand.BrandId">@brand.BrandName</option>
                        }
                    </select>

                </div>
            </div>
            <div class="grid__column-10">
                <div class="grid__row productList">
                    <input type="hidden" value="@ViewBag.Products" id="prodList">
                    @* <partial name="_ProductListPartial"></partial> *@
                </div>
                @if(ViewContext.RouteData.Values["action"].ToString() != "searchProduct"){
                    <partial name="_PaginationPartial"></partial>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function QueryAddToCartBtns_AndAddListener_ForThem(){
        @* Handling when user click on button Add to cart at some productItem in productList  *@
        let addToCartBtns = document.querySelectorAll('.productList__item-addToCartbtn')
        for(let i = 0; i<addToCartBtns.length; i++){ 
            addToCartBtns[i].addEventListener('click', function(e){
                e.stopPropagation()
                if(@Html.Raw(Json.Serialize(@User.Identity.IsAuthenticated)) == false){
                    MakeUserLogin()
                }
                else{
                    let productId = addToCartBtns[i].querySelector('.hiddenProductId').value;
                    let request = new XMLHttpRequest();
                    request.open("POST", `/cart/add/${productId}`, true)
                    request.onreadystatechange = function() {
                        if (this.readyState == 4 && this.status == 200) {
                            toast({
                                title: 'Thành công',
                                message: 'Thêm sản phẩm vào giỏ hàng thành công',
                                type: 'success',
                                duration: 3000
                            })
                            @* alert("Thêm sản phẩm vào giỏ hàng thành công") *@
                            document.querySelector('.barWithSearch__cart-numofProd').textContent = this.responseText
                        }
                    }
                    request.send()
                }
            })
        }
    }

    var productField = document.querySelector('.productList')
    var productsWillShow = new Array()

    @* get ProductData from viewbag to help sort product*@
    var productList = @Html.Raw(Json.Serialize(@ViewBag.Products))
    let brandOptions = document.querySelectorAll('[name="brandOption"]')


    function UpDateProductList(object, productField){
        productField.innerHTML = "";
        let sortType = document.querySelector('input[name="sortType"]:checked').value
        if(sortType == 1){
            object.sort((a,b) => {
                return a['discountPrice'] - b['discountPrice']
            })
        }
        else if(sortType == 2){
            object.sort((a,b) => {
                return b['discountPrice'] - a['discountPrice']
            })
        }
        for(let i in object){
            productField.innerHTML += GenerateHTMLForProductItem(object, i)
        }
    }

    function filterProductByBrandAndPrice(){
        let priceRangeId = document.querySelector('input[name="priceRange"]:checked').value
        let brandId = document.getElementById('brandSelection').value
        productsWillShow = new Array()
        let min = 0
        let max = 0
        switch(priceRangeId){
            case '1':
                min = 0
                max = 1000000
                break
            case '2':
                min = 1000000
                max = 5000000
                break
            case '3':
                min = 5000000
                max = 10000000
                break
            case '4':
                min = 10000000
                max = 20000000
                break
            case '5':
                min = 20000000
                max = 2147483647
                break
            default:
                min = 0
                max = 2147483647
        }
        for(let i =0;i < productList.length; i++){
            if(brandId == 0){
                if(productList[i]['discountPrice'] > min && productList[i]['discountPrice'] < max){
                    productsWillShow.push(productList[i])
                }
            }
            else{
                if(productList[i]['brandId'] == brandId && productList[i]['discountPrice'] > min && productList[i]['discountPrice'] < max){
                    productsWillShow.push(productList[i])
                }
            }
            
        }
        UpDateProductList(productsWillShow, productField)
        QueryAddToCartBtns_AndAddListener_ForThem()
        QueryProductItems_AndAddClickListener_ForThem()
    }

    UpDateProductList(productList, productField)
    QueryAddToCartBtns_AndAddListener_ForThem()
    QueryProductItems_AndAddClickListener_ForThem()

    @* function sendRequestUpdateProductList(url){
        let request = new XMLHttpRequest();
        request.onreadystatechange = function() {
            if (this.readyState == 4 && this.status == 200) {
                productList = JSON.parse(this.responseText)
                UpDateProductList(productList, productField)
            }
        }
        request.open("POST", url, true)
        request.send()
    }

    function customizeUrlForFilter(){
        let brandid = brandFilter.options[brandFilter.selectedIndex].value
        let priceRangeId = document.querySelector('input[name="priceRange"]:checked').value
        let url = ''
        if(controllerName == 'Home' && actionname =='Index'){
            url = `home/filter/${brandid}`
        }
        else{
            url = `/home/filter/${brandid}/${categoryname}`
        }
        return url += `/${priceRangeId}`
    } *@

    @* Filter product by brand in all page  *@

    let brandFilter = document.getElementById('brandSelection')
    brandFilter.addEventListener('change', function(e){
        filterProductByBrandAndPrice()
    })

    @* Filter product by price in all page  *@

    let priceFilter = document.querySelectorAll('[name="priceRange"]') 
    for(let i = 0; i < priceFilter.length; i++){
        priceFilter[i].addEventListener('change', function(e){
            filterProductByBrandAndPrice()
        })
    }

    @* Sort product by price in all page *@
    let sortOptions = document.querySelectorAll('[name="sortType"]') 
    for(let i = 0; i < sortOptions.length; i++){
        sortOptions[i].addEventListener('change', function(e){
            filterProductByBrandAndPrice()
        })
    }

</script>