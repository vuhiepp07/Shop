@{
    Layout = "_Layout";
    
}
@RenderBody();
@functions{
    public string normalizePrice(string price){
        for(int i = price.Length -1, x = 0 ; i> 0; i--, x++){
            if(x == 2){
                price = price.Insert(i, ",");
                i++;
                x=-2;
            }
        }
        return price;
    }
}

<div class="content">
    <div class="grid">
        <div class="grid__row">
            <div class="grid__column-2">
                <div class="productFilter">
                    <h3 class="productFilter__heading">Lọc theo giá</h3>
                    <div class="productFilter__priceFilter">
                        <div class="productFilter__priceFilter-item">
                            <input id="price1" type="radio" name="priceRange" value="1">
                            <label for="price1"> 0đ - 1tr </label><br>
                        </div>
                        <div class="productFilter__priceFilter-item">
                            <input id="price2" type="radio" name="priceRange" value="2">
                            <label for="price2"> 1tr - 5tr </label><br>
                        </div>
                        <div class="productFilter__priceFilter-item">
                            <input id="price3" type="radio" name="priceRange" value="3">
                            <label for="price3"> 5tr - 10tr </label><br>
                        </div>
                        <div class="productFilter__priceFilter-item">
                            <input id="price4" type="radio" name="priceRange" value="4">
                            <label for="price4"> 10tr - 20tr </label><br>
                        </div>
                        <div class="productFilter__priceFilter-item">
                            <input id="price5" type="radio" name="priceRange" value="5">
                            <label for="price5"> >20tr </label><br>
                        </div>
                        <div class="productFilter__priceFilter-item">
                            <input id="price6" type="radio" name="priceRange" checked = "true" value="6">
                            <label for="price6"> Tất cả giá </label><br>
                        </div>
                    </div>

                    <h3 class="productFilter__heading" style="margin-top: 50px;">Sắp xếp theo giá</h3>
                    <div class="productFilter__sortProduct">
                        <div class="productFilter__sortProduct-item">
                            <input id="sort1" type="radio" name="sortType" value="1">
                            <label for="sort1"> Tăng dần </label><br>
                        </div>
                        <div class="productFilter__sortProduct-item">
                            <input id="sort2" type="radio" name="sortType" value="2">
                            <label for="sort2"> Giảm dần </label><br>
                        </div>
                        <div class="productFilter__sortProduct-item">
                            <input id="sort3" checked="true" type="radio" name="sortType" value="3">
                            <label for="sort3"> Mặc định </label><br>
                        </div>
                    </div>

                    <h3 class="productFilter__heading" style="margin-top: 50px;">Lọc theo hãng</h3>
                    <select class="productFilter__brandFilter" name="brandSelection" id="brandSelection">
                        <option name="brandOption" value="0">Tất cả</option>
                        @foreach(Brand brand in ViewBag.Brands){
                            <option name="brandOption" value="@brand.BrandId">@brand.BrandName</option>
                        }
                    </select>

                </div>
            </div>
            <div class="grid__column-10">
                <div class="grid__row productList">
                    <input type="hidden" value="@ViewBag.Products" id="prodList">
                    @foreach (Product item in ViewBag.Products)
                    {
                        <div class="grid__column-TwoOfTen productList__item">
                            <div class="productList__item-img" style="background-image: url(/images/products/@item.ImageUrl);">
                            </div>
                            <div class="productList__item-name">
                                <span>@item.ProductName</span>
                            </div>
                            
                            <div class="productList__item-Price">
                                <div class="productList__item-Newprice">
                                    @{
                                        string Price = normalizePrice(item.Price.ToString());
                                    }
                                    <span>@Price₫</span>
                                </div>
                            @if(item.Price == item.Price){
                                <div class="productList__item-Oldprice">
                                    @{
                                        string OldPrice = normalizePrice(item.Price.ToString());
                                    }
                                    <span>@OldPrice₫</span>
                                </div>
                            }
                            </div>
                            @{
                                foreach (Discount discount in ViewBag.Discounts)
                                {
                                    string discountPercent;
                                    if(discount.DiscountId == item.ProductDiscountId){
                                        discountPercent = discount.DiscountPercentage.ToString();
                                        @* if(discount.DiscountPercentage != 0){
                                            <div class="productList__item-SaleOf">
                                                <span style="line-height: 20px;" >GIẢM</span><br>
                                                <span>@discountPercent%</span>
                                            </div>
                                        }  *@
                                        <div class="productList__item-SaleOf">
                                                <span style="line-height: 20px;" >GIẢM</span><br>
                                                <span>@discountPercent%</span>
                                        </div>
                                    }
                                }
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var controllerName = '@ViewContext.RouteData.Values["controller"]'
    var actionname = '@ViewContext.RouteData.Values["action"]'
    var categoryname = '@ViewContext.RouteData.Values["categoryname"]'
    var productField = document.querySelector('.productList')

    @* get ProductData from viewbag to help sort product by price function *@
    var productList = @Html.Raw(Json.Serialize(@ViewBag.Products))

    @* Handling when user access to URL:home/Asus/Keyboard, user can not change brandFilter
        value (From Asus to Apple or something else) in the brandFilter anymore because the brand
        can only be Asus *@
    if(actionname != "Index" && actionname != "Category" && actionname != "searchProduct"){
        let brandOptions = document.querySelectorAll('[name="brandOption"]')
        for(let i = 0; i < brandOptions.length; i++){
            if(brandOptions[i].value == productList[0]['brandId']){
                brandOptions[i].setAttribute('selected', 'true')
            }
            else{
                brandOptions[i].setAttribute('disabled', 'true')
            }
        }
    }

    function normalizePrice(price){
        for(var i = price.length -1, x = 0 ; i> 0; i--, x++){
            if(x == 2){
                price = price.slice(0, i) + "," + price.slice(i)
                i++;
                x=-2;
            }
        }
        return price;
    }


    function UpDateProductList(object, productField){
        productField.innerHTML = "";
        let sortType = document.querySelector('input[name="sortType"]:checked').value
        if(sortType == 1){
            object.sort((a,b) => {
                return a['price'] - b['price']
            })
        }
        else if(sortType == 2){
            object.sort((a,b) => {
                return b['price'] - a['price']
            })
        }
        

        for(let i in object){
            let productPrice = String(object[i]['price'])
            let productPriceInString = normalizePrice(productPrice)
            let productOldPrice = String(object[i]['price'])
            let productOldPriceInString = normalizePrice(productPrice)

            let newHtml = `
                <div class="grid__column-TwoOfTen productList__item">
                    <div class="productList__item-img" style="background-image: url(/images/products/${object[i]['imageUrl']});">
                    </div>
                    <div class="productList__item-name">
                        <span>${object[i]['productName']}</span>
                    </div>
                    
                    <div class="productList__item-Price">
                        <div class="productList__item-Newprice">
                            <span>${productPriceInString}₫</span>
                        </div>
            `
            if(productPrice == productOldPrice){
                newHtml += `
                <div class="productList__item-Oldprice">
                    <span>${productOldPriceInString}₫</span>
                </div>
                `
            }
            newHtml += `</div>`

            let productDiscountPercentage = ((object[i]['price'] - object[i]['price'])/object[i]['price'])*10
            if(productDiscountPercentage == 0){
                newHtml += `
                    <div class="productList__item-SaleOf">
                        <span style="line-height: 20px;" >GIẢM</span><br>
                        <span>${productDiscountPercentage}%</span>
                    </div>
                `
            }
            
            newHtml += `</div>`

            productField.innerHTML += newHtml
        }
    }

    function filterProductByBrandAndPrice(){
        let priceRangeId = document.querySelector('input[name="priceRange"]:checked').value
        let brandId = document.getElementById('brandSelection').value
        let productsWillShow = new Array()
        let min = 0
        let max = 0
        switch(priceRangeId){
            case '1':
                min = 0
                max = 1000000
                break
            case '2':
                min = 1000000
                max = 5000000
                break
            case '3':
                min = 5000000
                max = 10000000
                break
            case '4':
                min = 10000000
                max = 20000000
                break
            case '5':
                min = 20000000
                max = 2147483647
                break
            default:
                min = 0
                max = 2147483647
        }
        for(let i =0;i < productList.length; i++){
            if(brandId == 0){
                if(productList[i]['price'] > min && productList[i]['price'] < max){
                    productsWillShow.push(productList[i])
                }
            }
            else{
                if(productList[i]['brandId'] == brandId && productList[i]['price'] > min && productList[i]['price'] < max){
                    productsWillShow.push(productList[i])
                }
            }
            
        }
        UpDateProductList(productsWillShow, productField)
    }

    function sendRequestUpdateProductList(url){
        let request = new XMLHttpRequest();
        request.onreadystatechange = function() {
            if (this.readyState == 4 && this.status == 200) {
                productList = JSON.parse(this.responseText)
                console.log(productList)
                UpDateProductList(productList, productField)
            }
        }
        request.open("POST", url, true)
        request.send()
    }

    function customizeUrlForFilter(){
        let brandid = brandFilter.options[brandFilter.selectedIndex].value
        let priceRangeId = document.querySelector('input[name="priceRange"]:checked').value
        let url = ''
        if(controllerName == 'Home' && actionname =='Index'){
            url = `home/filter/${brandid}`
        }
        else{
            url = `/home/filter/${brandid}/${categoryname}`
        }
        return url += `/${priceRangeId}`
    }

    @* Filter product by brand in all page  *@

    let brandFilter = document.getElementById('brandSelection')
    brandFilter.addEventListener('change', function(e){
        filterProductByBrandAndPrice()
    })

    @* Filter product by price in all page  *@

    let priceFilter = document.querySelectorAll('[name="priceRange"]') 
    for(let i = 0; i < priceFilter.length; i++){
        priceFilter[i].addEventListener('change', function(e){
            filterProductByBrandAndPrice()
        })
    }

    @* Sort product by price in all page *@
    let sortOptions = document.querySelectorAll('[name="sortType"]') 
    for(let i = 0; i < sortOptions.length; i++){
        sortOptions[i].addEventListener('change', function(e){
            filterProductByBrandAndPrice()
        })
    }
</script>