@using Shop


<div class="content cartProducts grid" style="overflow-x:auto;">

    <table class="cartProducts__table">
        <colgroup>
        <col class="colStyle" span="1" style="visibility: collapse;">
        </colgroup>
        <thead class="cartProducts__Heading">
            <th>Chọn sản phẩm</th>
            <th>Tên sản phẩm</th>
            <th>Hình ảnh</th>
            <th>Số lượng</th>
            <th>Giá</th>
        </thead>
        <tbody>
            @foreach (CartDetail product in ViewBag.CartDetail){
                <tr class ="cartProducts__item">
                        <td><input name="cartProducts__item-checkbox" value=@product.ProductId type="checkbox"></td>
                        <td>@product.ProductName</td>
                        <td><img class="cartProducts__item-img" src=/images/products/@product.ImageUrl alt="ProductImg"></td>
                        <td>
                            <input id="hiddenProductId" type="hidden" value=@product.ProductId>
                            <i class="cartProducts__item-minusIcon fa-solid fa-minus"></i>
                            <span class="cartProducts__item-quantity">@product.Quantity</span>
                            <i class="cartProducts__item-plusIcon fa-solid fa-plus"></i>
                        </td>
                        <input id="hiddenProductPrice" type="hidden" value=@product.DiscountPrice>
                        <td class="cartProducts__item-price">@Shop.Helper.normalizePrice((product.DiscountPrice * product.Quantity).ToString())đ</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="cart__actions">
        <div class="cart__action-selectProduct">
            <i class="cart__action-icon fa-solid fa-check"></i>
            Chọn sản phẩm
        </div>
        <div class="cart__action-modify">
            <div class="cart__action-deleteProduct">
                <i class="cart__action-icon fa-solid fa-ban"></i>
                Xoá sản phẩm
            </div>
            <div class="cart__action-checkout">
                <i class="cart__action-icon fa-solid fa-money-check-dollar"></i>
                Đặt mua hàng
            </div>
        </div>
        
    </div>

    <script>
        function checkMinNumOfProduct(){
            let numOfProductNodes = document.querySelectorAll('.cartProducts__item-quantity')
            for(let i = 0; i < numOfProductNodes.length; i++){
                if(parseInt(numOfProductNodes[i].textContent) < 2){
                    parent = numOfProductNodes[i].parentNode
                    parent.querySelector('.cartProducts__item-minusIcon').style.display = 'none'
                }
            }
        }

        checkMinNumOfProduct()
        var plusBtn = document.getElementsByClassName('cartProducts__item-plusIcon')
        var minusBtn = document.getElementsByClassName('cartProducts__item-minusIcon')        

        for(let i = 0; i<plusBtn.length; i++){

            @* Handling click on plus icon next to the number of product   *@
            plusBtn[i].addEventListener('click', function(e){
                let parent = plusBtn[i].parentNode
                let grandNode = parent.parentNode
                let productPrice = grandNode.querySelector('#hiddenProductPrice').value
                let productId = parent.querySelector('#hiddenProductId').value
                let numOfProductNode = parent.querySelector('.cartProducts__item-quantity')
                let numOfProduct = parseInt(numOfProductNode.textContent)
                let cartObj = {
                    ProductId : productId,
                    Quantity : numOfProduct + 1
                }
                let result = SendHttpPostRequest("/cart/edit", cartObj)
                if(result === 'true'){
                    let toalNumOfProductInCartNode = document.querySelector('.barWithSearch__cart-numofProd')
                    let toalNumOfProduct = parseInt(toalNumOfProductInCartNode.textContent)
                    let productRowPriceNode = grandNode.querySelector('.cartProducts__item-price') 
                    productRowPriceNode.textContent = normalizePrice(String(productPrice * (numOfProduct + 1)))
                    toalNumOfProductInCartNode.textContent = String(toalNumOfProduct + 1)
                    numOfProductNode.textContent = String(numOfProduct + 1)
                    parent.querySelector('.cartProducts__item-minusIcon').style.display = 'inline-block'
                }
            })

            @* Handling click on minus icon next to the number of product   *@
            minusBtn[i].addEventListener('click', function(e){
                let parent = minusBtn[i].parentNode
                let grandNode = parent.parentNode
                let productPrice = grandNode.querySelector('#hiddenProductPrice').value
                let productId = parent.querySelector('#hiddenProductId').value
                let numOfProductNode = parent.querySelector('.cartProducts__item-quantity')
                let numOfProduct = parseInt(numOfProductNode.textContent)
                let cartObj = {
                    ProductId : productId,
                    Quantity : numOfProduct - 1
                }
                let result = SendHttpPostRequest("/cart/edit", cartObj)
                if(result === 'true'){
                    let toalNumOfProductInCartNode = document.querySelector('.barWithSearch__cart-numofProd')
                    let toalNumOfProduct = parseInt(toalNumOfProductInCartNode.textContent)
                    let productRowPriceNode = grandNode.querySelector('.cartProducts__item-price') 
                    productRowPriceNode.textContent = normalizePrice(String(productPrice * (numOfProduct - 1)))
                    toalNumOfProductInCartNode.textContent = String(toalNumOfProduct - 1)
                    numOfProductNode.textContent = String(numOfProduct -1)
                    if(numOfProduct - 1 < 2){
                        parent.querySelector('.cartProducts__item-minusIcon').style.display = 'none'
                    }
                }

            })
        }

        @* Handling select product button in Cart/Index  *@
        var selectProductbtn = document.querySelector('.cart__action-selectProduct')
        selectProductbtn.addEventListener('click', function(e){
            let visibilityOption = document.querySelector('.colStyle')
            if(visibilityOption.style['visibility'] == 'collapse'){
                visibilityOption.style.visibility = 'visible'
            }
            else{
                visibilityOption.style.visibility = 'collapse'
            }
        })

        @* get checked productId List in Cart/Index  *@
        function getCheckedProductInCart(){
            let selectedItem = document.querySelectorAll('input[name=cartProducts__item-checkbox]:checked')
            let selectedProductIds = []
            for(let i = 0; i < selectedItem.length; i++){
                selectedProductIds.push(selectedItem[i].value)
            }
            return selectedProductIds
        }

        @* Handling delete product button in Cart/Index  *@
        var deleteProductbtn = document.querySelector('.cart__action-deleteProduct')
        deleteProductbtn.addEventListener('click', function(e){
            let productIds = getCheckedProductInCart()
            console.log(productIds)
            if(productIds.length == 0){
                toast({
                    title: 'Không thể thực hiện',
                    message: 'Bạn chưa chọn sản phẩm nào để xóa',
                    type: 'info',
                    duration: 3000
                })
                @* alert("Bạn chưa chọn sản phẩm nào để xóa") *@
            }
            else{
                if(confirm("Bạn có chắc muốn xóa sản phẩm")){
                    let result = SendHttpPostRequest("/cart/delete", productIds)
                    if(result === 'true'){
                        cartProductList = document.querySelectorAll('.cartProducts__item')
                        for(let i = 0; i < cartProductList.length; i++){
                            let productId = cartProductList[i].querySelector('#hiddenProductId').value
                            if(productIds.includes(productId)){
                                let deleteNumber = parseInt(cartProductList[i].querySelector('.cartProducts__item-quantity').textContent)
                                let numofProdNode = document.querySelector('.barWithSearch__cart-numofProd')
                                numofProdNode.textContent = parseInt(numofProdNode.textContent) - deleteNumber
                                cartProductList[i].remove()
                            }
                        }
                        toast({
                            title: 'Thành công',
                            message: 'Xóa sản phẩm thành công',
                            type: 'success',
                            duration: 3000
                        })
                        @* alert("Xoá sản phẩm thành công") *@
                    }
                    else{
                        toast({
                            title: 'Thất bại',
                            message: 'Xóa sản phẩm thất bại',
                            type: 'error',
                            duration: 3000
                        })
                        @* alert("Xoá sản phẩm thất bại") *@
                    }
                }
            }
        })

        @* Handling checkout button int Cart/Index *@
        var checkOutbtn = document.querySelector('.cart__action-checkout')
        checkOutbtn.addEventListener('click', function(e){
            let productIds = getCheckedProductInCart()
            if(productIds.length == 0){
                cartProductList = document.querySelectorAll('.cartProducts__item')
                for(let i = 0; i < cartProductList.length; i++){
                    let productId = cartProductList[i].querySelector('#hiddenProductId').value
                    productIds.push(productId)
                }
            }
            let result = SendHttpPostRequest("/cart/UpdateCheckoutProductList", productIds)
            if(result === 'true'){
                window.location.href = '/order/Create'
            }

        })
    </script>
</div>

